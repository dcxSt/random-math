def mult(perms,n):
    # in the group S_n
    m=[]
    done = []
    for i in range(n):
        num = i+1
        if not num in done:
            curr_cycle = []
            while num not in curr_cycle:
                curr_cycle.append(num)
                nxt = get_destination(num,perms)
                num = nxt
                done.append(num)
            if len(curr_cycle) >= 2:
                m.append(curr_cycle)
    return m


def get_destination(num,perms):
    r_perms = perms[::-1]
    nxt = num
    for per in r_perms:
        if nxt in per:
            nxt = per[(per.index(nxt)+1) % len(per)] 
    return nxt


def cycle(act_per,per):# act_per and per need to be in 2d list format
    n = max([max([max(i) for i in act_per]),max([max(i) for i in per])])
    print(per,end=' --> ')
    nxtper = mult(act_per+per,n)
    print(nxtper,end=' --> ')
    while nxtper != per:
        nxtper = mult(act_per+nxtper,n)
        print(nxtper,end=' --> ')
    print()

# we used yank and bop when making the caylay diagram of A5, A5 is generated by ...
def yank(per):
    cycle([[1,2],[3,4]],per)

def bop(per):
    cycle([[1,3,5]],per)

def generate(generators,n):
    # generates the subgroup of n which is generated by the permutations in generators
    elements = [[]] # contains the identity

    return 


